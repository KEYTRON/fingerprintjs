import { Builder, By, until, WebDriver } from 'selenium-webdriver';
import { Options } from 'selenium-webdriver/chrome';

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Selenium –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FingerprintJS
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤
 */
class SeleniumFingerprintExample {
  private driver: WebDriver;

  constructor() {
    this.driver = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è FingerprintJS
   */
  async initializeDriver(): Promise<void> {
    try {
      const chromeOptions = new Options();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      chromeOptions.addArguments('--no-sandbox');
      chromeOptions.addArguments('--disable-dev-shm-usage');
      chromeOptions.addArguments('--disable-gpu');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
      chromeOptions.addArguments('--disable-extensions');
      chromeOptions.addArguments('--disable-plugins');
      chromeOptions.addArguments('--disable-images');
      chromeOptions.addArguments('--disable-javascript-harmony-shipping');
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      chromeOptions.addArguments('--window-size=1920,1080');
      
      this.driver = await new Builder()
        .forBrowser('chrome')
        .setChromeOptions(chromeOptions)
        .build();

      console.log('‚úÖ –î—Ä–∞–π–≤–µ—Ä Chrome –¥–ª—è FingerprintJS —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å FingerprintJS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async createTestPage(): Promise<string> {
    const html = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>FingerprintJS Test Page</title>
          <script src="https://openfpcdn.io/fingerprintjs/v4"></script>
          <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              .result { background: #f5f5f5; padding: 20px; margin: 20px 0; border-radius: 5px; }
              .fingerprint { font-family: monospace; word-break: break-all; }
              button { padding: 10px 20px; font-size: 16px; cursor: pointer; }
              .loading { color: #666; }
          </style>
      </head>
      <body>
          <h1>FingerprintJS Test Page</h1>
          <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É FingerprintJS –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.</p>
          
          <button id="generateFingerprint">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø–µ—á–∞—Ç–æ–∫</button>
          <button id="getBrowserInfo">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ</button>
          
          <div id="results"></div>
          
          <script>
              const resultsDiv = document.getElementById('results');
              
              // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞
              document.getElementById('generateFingerprint').addEventListener('click', async () => {
                  resultsDiv.innerHTML = '<div class="loading">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞...</div>';
                  
                  try {
                      const fp = await FingerprintJS.load();
                      const result = await fp.get();
                      
                      const html = \`
                          <div class="result">
                              <h3>–û—Ç–ø–µ—á–∞—Ç–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞:</h3>
                              <div class="fingerprint">\${result.visitorId}</div>
                              <h4>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</h4>
                              <ul>
                                  \${Object.entries(result.components).map(([key, value]) => 
                                      \`<li><strong>\${key}:</strong> \${JSON.stringify(value.value)}</li>\`
                                  ).join('')}
                              </ul>
                          </div>
                      \`;
                      
                      resultsDiv.innerHTML = html;
                  } catch (error) {
                      resultsDiv.innerHTML = \`<div class="result" style="color: red;">–û—à–∏–±–∫–∞: \${error.message}</div>\`;
                  }
              });
              
              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
              document.getElementById('getBrowserInfo').addEventListener('click', () => {
                  const info = {
                      userAgent: navigator.userAgent,
                      language: navigator.language,
                      platform: navigator.platform,
                      cookieEnabled: navigator.cookieEnabled,
                      onLine: navigator.onLine,
                      screen: {
                          width: screen.width,
                          height: screen.height,
                          availWidth: screen.availWidth,
                          availHeight: screen.availHeight
                      },
                      window: {
                          innerWidth: window.innerWidth,
                          innerHeight: window.innerHeight,
                          outerWidth: window.outerWidth,
                          outerHeight: window.outerHeight
                      }
                  };
                  
                  const html = \`
                      <div class="result">
                          <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ:</h3>
                          <pre>\${JSON.stringify(info, null, 2)}</pre>
                      </div>
                  \`;
                  
                  resultsDiv.innerHTML = html;
              });
          </script>
      </body>
      </html>
    `;

    const fs = require('fs');
    const path = require('path');
    const filePath = path.join(__dirname, 'fingerprint-test.html');
    fs.writeFileSync(filePath, html);
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞:', filePath);
    return filePath;
  }

  /**
   * –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  async openTestPage(filePath: string): Promise<void> {
    try {
      const fileUrl = `file://${filePath}`;
      await this.driver.get(fileUrl);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞');
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.driver.wait(until.titleContains('FingerprintJS Test Page'), 10000);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
   */
  async generateFingerprint(): Promise<string> {
    try {
      // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
      const button = await this.driver.findElement(By.id('generateFingerprint'));
      await button.click();
      
      // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      await this.driver.wait(until.elementLocated(By.className('fingerprint')), 10000);
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
      const fingerprintElement = await this.driver.findElement(By.className('fingerprint'));
      const fingerprint = await fingerprintElement.getText();
      
      console.log('‚úÖ –û—Ç–ø–µ—á–∞—Ç–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω:', fingerprint);
      return fingerprint;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  async getBrowserInfo(): Promise<void> {
    try {
      // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const button = await this.driver.findElement(By.id('getBrowserInfo'));
      await button.click();
      
      // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      await this.driver.wait(until.elementLocated(By.tagName('pre')), 5000);
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const infoElement = await this.driver.findElement(By.tagName('pre'));
      const info = await infoElement.getText();
      
      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∞:');
      console.log(info);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
   */
  async takeFingerprintScreenshot(filename: string): Promise<void> {
    try {
      const screenshot = await this.driver.takeScreenshot();
      const fs = require('fs');
      fs.writeFileSync(filename, screenshot, 'base64');
      console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª ${filename}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
   */
  async testFingerprintStability(iterations: number = 3): Promise<void> {
    try {
      console.log(`üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ (${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)...`);
      
      const fingerprints: string[] = [];
      
      for (let i = 0; i < iterations; i++) {
        console.log(`\n--- –ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}/${iterations} ---`);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await this.driver.navigate().refresh();
        await this.driver.wait(until.titleContains('FingerprintJS Test Page'), 10000);
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞
        const fingerprint = await this.generateFingerprint();
        fingerprints.push(fingerprint);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:');
      fingerprints.forEach((fp, index) => {
        console.log(`   –ò—Ç–µ—Ä–∞—Ü–∏—è ${index + 1}: ${fp}`);
      });
      
      const uniqueFingerprints = new Set(fingerprints);
      const stability = uniqueFingerprints.size === 1 ? '–°—Ç–∞–±–∏–ª–µ–Ω' : '–ù–µ—Å—Ç–∞–±–∏–ª–µ–Ω';
      
      console.log(`\nüéØ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${stability}`);
      console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤: ${uniqueFingerprints.size}`);
      console.log(`   –í—Å–µ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: ${fingerprints.length}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
   */
  async closeBrowser(): Promise<void> {
    try {
      if (this.driver) {
        await this.driver.quit();
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   */
  async run(): Promise<void> {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ Selenium —Å FingerprintJS...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
      await this.initializeDriver();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const testPagePath = await this.createTestPage();
      
      // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.openTestPage(testPagePath);
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ
      await this.getBrowserInfo();
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞
      const fingerprint = await this.generateFingerprint();
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      await this.testFingerprintStability(3);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
      await this.takeFingerprintScreenshot('fingerprint-results.png');
      
      console.log('‚úÖ –ü—Ä–∏–º–µ—Ä Selenium —Å FingerprintJS —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞:', error);
    } finally {
      // –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
      await this.closeBrowser();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  const example = new SeleniumFingerprintExample();
  example.run().catch(console.error);
}

export default SeleniumFingerprintExample;