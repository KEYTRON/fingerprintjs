/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

export interface BenchmarkResult {
  name: string
  duration: number
  iterations: number
  averageTime: number
  minTime: number
  maxTime: number
  memoryUsage?: number
}

export interface BenchmarkOptions {
  iterations?: number
  warmupIterations?: number
  timeout?: number
  memoryTracking?: boolean
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫ —Ñ—É–Ω–∫—Ü–∏–∏
 */
export async function benchmark<T>(
  name: string,
  fn: () => T | Promise<T>,
  options: BenchmarkOptions = {}
): Promise<BenchmarkResult> {
  const {
    iterations = 1000,
    warmupIterations = 100,
    timeout = 30000,
    memoryTracking = false
  } = options

  const startTime = performance.now()
  const results: number[] = []
  
  // –†–∞–∑–æ–≥—Ä–µ–≤
  for (let i = 0; i < warmupIterations; i++) {
    try {
      await Promise.resolve(fn())
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–µ
    }
  }
  
  // –û—Å–Ω–æ–≤–Ω–æ–π –±–µ–Ω—á–º–∞—Ä–∫
  for (let i = 0; i < iterations; i++) {
    const iterStart = performance.now()
    
    try {
      await Promise.resolve(fn())
      const iterEnd = performance.now()
      results.push(iterEnd - iterStart)
    } catch (e) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout
    if (performance.now() - startTime > timeout) {
      break
    }
  }
  
  const endTime = performance.now()
  const totalDuration = endTime - startTime
  
  if (results.length === 0) {
    throw new Error(`Benchmark "${name}" failed: no successful iterations`)
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const sortedResults = results.sort((a, b) => a - b)
  const minTime = sortedResults[0]
  const maxTime = sortedResults[sortedResults.length - 1]
  const averageTime = results.reduce((sum, time) => sum + time, 0) / results.length
  
  const result: BenchmarkResult = {
    name,
    duration: totalDuration,
    iterations: results.length,
    averageTime,
    minTime,
    maxTime
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
  if (memoryTracking && 'memory' in performance) {
    const memory = (performance as any).memory
    if (memory) {
      result.memoryUsage = memory.usedJSHeapSize
    }
  }
  
  return result
}

/**
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
 */
export function compareBenchmarks(results: BenchmarkResult[]): void {
  console.log('\n=== Benchmark Comparison ===')
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
  const sorted = [...results].sort((a, b) => a.averageTime - b.averageTime)
  
  sorted.forEach((result, index) => {
    const rank = index + 1
    const improvement = index === 0 ? 0 : 
      ((sorted[0].averageTime - result.averageTime) / sorted[0].averageTime * 100)
    
    console.log(`${rank}. ${result.name}`)
    console.log(`   Average: ${result.averageTime.toFixed(3)}ms`)
    console.log(`   Min: ${result.minTime.toFixed(3)}ms`)
    console.log(`   Max: ${result.maxTime.toFixed(3)}ms`)
    console.log(`   Iterations: ${result.iterations}`)
    if (result.memoryUsage) {
      console.log(`   Memory: ${(result.memoryUsage / 1024 / 1024).toFixed(2)}MB`)
    }
    if (improvement !== 0) {
      console.log(`   Improvement: ${improvement.toFixed(1)}% slower than fastest`)
    }
    console.log('')
  })
}

/**
 * –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function benchmarkHashing(): Promise<BenchmarkResult[]> {
  const results: BenchmarkResult[] = []
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const { x64hash128, clearHashCache, getHashCacheStats } = await import('./hashing')
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testStrings = [
    'short',
    'medium length string',
    'very long string with many characters to test performance of hashing algorithm',
    'string with special chars: !@#$%^&*()_+-=[]{}|;:,.<>?',
    'unicode string: üöÄüåüüéâüéäüéãüéçüééüéèüéêüéëüéíüéìüéîüéïüéñüéóüéòüéôüéöüéõüéúüéùüéûüéüüé†üé°üé¢üé£üé§üé•üé¶üéßüé®üé©üé™üé´üé¨üé≠üéÆüéØüé∞üé±üé≤üé≥üé¥üéµüé∂üé∑üé∏üéπüé∫üéªüéºüéΩüéæüéø'
  ]
  
  // –ë–µ–Ω—á–º–∞—Ä–∫ –±–µ–∑ –∫—ç—à–∞
  clearHashCache()
  results.push(await benchmark('Hashing without cache', () => {
    testStrings.forEach(str => x64hash128(str))
  }, { iterations: 1000 }))
  
  // –ë–µ–Ω—á–º–∞—Ä–∫ —Å –∫—ç—à–µ–º
  results.push(await benchmark('Hashing with cache', () => {
    testStrings.forEach(str => x64hash128(str))
  }, { iterations: 1000 }))
  
  // –ë–µ–Ω—á–º–∞—Ä–∫ —Å –Ω–æ–≤—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
  results.push(await benchmark('Hashing new strings', () => {
    for (let i = 0; i < 100; i++) {
      x64hash128(`new string ${i} ${Date.now()}`)
    }
  }, { iterations: 100 }))
  
  console.log('Cache stats:', getHashCacheStats())
  
  return results
}

/**
 * –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 */
export async function benchmarkSourceLoading(): Promise<BenchmarkResult[]> {
  const results: BenchmarkResult[] = []
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  const { loadSources } = await import('./entropy_source')
  const { sources } = await import('../sources')
  
  // –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  results.push(await benchmark('Load all sources', async () => {
    const getComponents = loadSources(sources, { cache: {}, debug: false }, [])
    await getComponents()
  }, { iterations: 10 }))
  
  // –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  const fastSources = {
    platform: sources.platform,
    vendor: sources.vendor,
    architecture: sources.architecture,
    cpuClass: sources.cpuClass,
    hardwareConcurrency: sources.hardwareConcurrency
  }
  
  results.push(await benchmark('Load fast sources only', async () => {
    const getComponents = loadSources(fastSources, { cache: {}, debug: false }, [])
    await getComponents()
  }, { iterations: 100 }))
  
  return results
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –±–µ–Ω—á–º–∞—Ä–∫–∏
 */
export async function runAllBenchmarks(): Promise<void> {
  console.log('üöÄ Starting FingerprintJS Performance Benchmarks...\n')
  
  try {
    // –ë–µ–Ω—á–º–∞—Ä–∫ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üìä Benchmarking hashing performance...')
    const hashingResults = await benchmarkHashing()
    compareBenchmarks(hashingResults)
    
    // –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    console.log('üìä Benchmarking source loading performance...')
    const sourceResults = await benchmarkSourceLoading()
    compareBenchmarks(sourceResults)
    
    console.log('‚úÖ All benchmarks completed successfully!')
  } catch (error) {
    console.error('‚ùå Benchmark failed:', error)
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export function measureTime<T>(name: string, fn: () => T | Promise<T>): Promise<T> {
  const start = performance.now()
  
  return Promise.resolve(fn()).then(result => {
    const end = performance.now()
    console.log(`‚è±Ô∏è  ${name}: ${(end - start).toFixed(3)}ms`)
    return result
  })
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
 */
export function profileMemory<T>(name: string, fn: () => T | Promise<T>): Promise<T> {
  if (!('memory' in performance)) {
    return Promise.resolve(fn())
  }
  
  const memory = (performance as any).memory
  const startMemory = memory.usedJSHeapSize
  
  return Promise.resolve(fn()).then(result => {
    const endMemory = memory.usedJSHeapSize
    const diff = endMemory - startMemory
    console.log(`üíæ ${name}: ${(diff / 1024).toFixed(2)}KB memory change`)
    return result
  })
}